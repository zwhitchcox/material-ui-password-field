'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styles = require('@material-ui/core/styles');

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var clipPath = function clipPath(value) {
  return {
    WebkitClipPath: value,
    clipPath: value
  };
};

var styles = {
  root: {
    width: 24,
    height: 24,
    position: 'relative',
    display: 'inline-block'
  },
  offIcon: {
    transition: 'clip-path 550ms cubic-bezier(0.4, 0.0, 0.2, 1), -webkit-clip-path 550ms cubic-bezier(0.4, 0.0, 0.2, 1)',
    width: '100%',
    height: '100%',
    position: 'absolute',
    left: 0,
    top: 0
  },
  onIcon: {
    transition: 'clip-path 550ms cubic-bezier(0.4, 0.0, 0.2, 1), -webkit-clip-path 550ms cubic-bezier(0.4, 0.0, 0.2, 1)',
    width: '100%',
    height: '100%',
    position: 'absolute',
    left: 0,
    top: 0
  }

  /**
   * An animated toggle icon.
   */
};function ToggleIcon(props) {
  var classes = props.classes,
      offIcon = props.offIcon,
      onIcon = props.onIcon,
      on = props.on,
      other = _objectWithoutProperties(props, ['classes', 'offIcon', 'onIcon', 'on']);

  return _react2.default.createElement(
    'div',
    _extends({ className: classes.root }, other),
    _react2.default.cloneElement(offIcon, {
      className: classes.offIcon,
      style: _extends({}, clipPath(on ? 'polygon(0% 0%, 0% 0%, 0% 0%)' : 'polygon(0% 200%, 0% 0%, 200% 0%)'), {
        visibility: !on || (0, _util.clipPathSupported)() ? 'visible' : 'hidden'
      })
    }),
    _react2.default.cloneElement(onIcon, {
      className: classes.onIcon,
      style: _extends({}, clipPath(on ? 'polygon(100% -100%, 100% 100%, -100% 100%)' : 'polygon(100% 100%, 100% 100%, 100% 100%)'), {
        visibility: on || (0, _util.clipPathSupported)() ? 'visible' : 'hidden'
      })
    })
  );
}

ToggleIcon.propTypes = {
  /**
   * The icon to be displayed if the `on` prop is set to `false`.
   */
  offIcon: _propTypes2.default.element.isRequired,
  /**
   * The icon to be displayed if the `on` prop is set to `true`.
   */
  onIcon: _propTypes2.default.element.isRequired,
  /**
   * Controls whether the `onIcon` or the `offIcon` is displayed.
   */
  on: _propTypes2.default.bool.isRequired
};

exports.default = (0, _styles.withStyles)(styles)(ToggleIcon);